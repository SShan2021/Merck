#fill in the NA with 0
#########################################
beta <- beta %>%
mutate_all(~ifelse(is.na(.),
0,
.))
simulation_list
new_outcome <- summary(glm(AE ~ ., data = new_data, family = "binomial"))$coef %>%
as.data.frame()
new_simulated_beta <- new_outcome %>%
filter(`Pr(>|z|)` < 0.05)
new_simulated_beta
new_simulated_beta <- new_outcome %>%
filter(`Pr(>|z|)` < 0.05) %>%
as.data.frame()
new_simulated_beta
coef_best_model
#get the significant betas
new_simulated_beta <- new_outcome %>%
filter(`Pr(>|z|)` < 0.05) %>%
coeff()
#get the significant betas
new_simulated_beta <- new_outcome %>%
filter(`Pr(>|z|)` < 0.05) %>%
coeff()
#get the significant betas
new_simulated_beta <- new_outcome %>%
filter(`Pr(>|z|)` < 0.05) %>%
coef()
new_simulated_beta
#get the significant betas
new_simulated_beta <- new_outcome %>%
filter(`Pr(>|z|)` < 0.05) %>%
as.data.frame()
#add back in the drug names
coef_new_simulated_beta <- data.frame(DRUG = new_simulated_beta@Dimnames[[1]][new_simulated_beta@i + 1],
COEF = new_simulated_beta@x)
#get the significant betas
new_simulated_beta <- new_outcome %>%
filter(`Pr(>|z|)` < 0.05)
#add back in the drug names
coef_new_simulated_beta <- data.frame(DRUG = new_simulated_beta@Dimnames[[1]][new_simulated_beta@i + 1],
COEF = new_simulated_beta@x)
new_outcome <- coef(summary(glm(AE ~ ., data = new_data, family = "binomial")))
#get the significant betas
new_simulated_beta <- new_outcome %>%
filter(`Pr(>|z|)` < 0.05)
#add back in the drug names
coef_new_simulated_beta <- data.frame(DRUG = new_outcome@Dimnames[[1]][new_outcome@i + 1],
COEF = new_outcome@x)
new_outcome
new_outcome@Dimnames[[1]]
new_outcome <- coef(summary(glm(AE ~ ., data = new_data, family = "binomial"))) %>%
as.data.frame()
# Filter for significant coefficients (p-value < 0.05)
significant_coefficients <- new_outcome %>%
filter(`Pr(>|z|)` < 0.05) %>%
rownames_to_column(var = "DRUG") %>%
select(DRUG, Estimate = Estimate) # Adjusting column names if necessary
significant_coefficients
# Filter for significant coefficients (p-value < 0.05)
significant_coefficients <- new_outcome %>%
filter(`Pr(>|z|)` < 0.05) %>%
rownames_to_column(var = "DRUG") %>%
select(DRUG, COEF = Estimate) # Adjusting column names if necessary
significant_coefficients
#########################################
#full-bind the significant beta to the real beta
#########################################
beta_v1 <- parameter_list %>%
full_join(significant_coefficients, by = "DRUG")
beta_v1
# Filter for significant coefficients (p-value < 0.05)
significant_coefficients <- new_outcome %>%
filter(`Pr(>|z|)` < 0.05) %>%
rownames_to_column(var = "DRUG") %>%
select(DRUG, COEF = Estimate) %>%
filter(!(DRUG == "(Intercept)")) #get rid of the intercept
significant_coefficients
#########################################
#full-bind the significant beta to the real beta
#########################################
beta_v1 <- parameter_list %>%
full_join(significant_coefficients, by = "DRUG")
beta_v1
significant_coefficients
#########################################
#full-bind the significant beta to the real beta
#########################################
beta_v1 <- parameter_list %>%
full_join(significant_coefficients, by = "DRUG")
colnames(beta_v1) <- c("COEF.PAR", "DRUG", "COEF.SIM")
#########################################
#fill in the NA with 0
#########################################
beta_v1 <- bbeta_v1eta %>%
mutate_all(~ifelse(is.na(.),
0,
.))
#########################################
#fill in the NA with 0
#########################################
beta_v1 <- beta_v1 %>%
mutate_all(~ifelse(is.na(.),
0,
.))
beta_v1
#how many times does parameter_list != 0
denom_spec <- beta_num - sum(ifelse(beta_v1[,"COEF.PAR"] != 0, 1, 0))
#how parameters specified in the model
denom_sen <- sum(ifelse(beta_v1[,"COEF.PAR"] != 0, 1, 0))
#how many times do both simulated beta and parameter_list != 0
num_sen <- sum(ifelse(beta_v1[,"COEF.PAR"] != 0 & beta_v1[,"COEF.SIM"] != 0, 1, 0))
#calculate sensitivity
if(denom_sen != 0) {
sensitivity <- num_sen/denom_sen
}
else{
#how parameters specified in the model
denom_sen <- sum(ifelse(beta_v1[,"COEF.PAR"] != 0, 1, 0))
#how many times do both simulated beta and parameter_list != 0
num_sen <- sum(ifelse(beta_v1[,"COEF.PAR"] != 0 & beta_v1[,"COEF.SIM"] != 0, 1, 0))
#calculate sensitivity
if(denom_sen != 0) {
sensitivity <- num_sen/denom_sen
}
else{
#calculate sensitivity
#########################################
#how parameters specified in the model
denom_sen <- sum(ifelse(beta_v1[,"COEF.PAR"] != 0, 1, 0))
#how many times do both simulated beta and parameter_list != 0
num_sen <- sum(ifelse(beta_v1[,"COEF.PAR"] != 0 & beta_v1[,"COEF.SIM"] != 0, 1, 0))
#calculate sensitivity
if(denom_sen != 0) {
sensitivity <- num_sen/denom_sen
}
else{
else{
#how parameters specified in the model
denom_sen <- sum(ifelse(beta_v1[,"COEF.PAR"] != 0, 1, 0))
#how many times do both simulated beta and parameter_list != 0
num_sen <- sum(ifelse(beta_v1[,"COEF.PAR"] != 0 & beta_v1[,"COEF.SIM"] != 0, 1, 0))
#calculate sensitivity
if(denom_sen != 0) {
sensitivity <- num_sen/denom_sen
}
else{
else{
#calculate sensitivity
if(denom_sen != 0) {
sensitivity <- num_sen/denom_sen
}
#calculate sensitivity
if(denom_sen != 0) {
sensitivity <- num_sen/denom_sen
} else{
sensitivity = 1
}
sensitivity
load("/Users/sophshan/Desktop/XTan Group/XTAN group - Summer project on iEMA platform - SHAN Research/Merck/7-GitHub/mercksimulation/")
load_all("/Users/sophshan/Desktop/XTan Group/XTAN group - Summer project on iEMA platform - SHAN Research/Merck/7-GitHub/mercksimulation/")
# Loop through each file
for (file_idx in 1:length(files)) {
file_name <- files[file_idx]
# Initialize a list for each file's results
file_validation <- list()
# Assuming the data frame's name inside the .RData matches the file name
# Dynamically access the data frame using get()
df <- get(file_name)
# Extract numbers after 'model' and 'n' from the file name
numbers_after_model <- str_extract(file_name, "(?<=model)\\d+")
numbers_after_n <- str_extract(file_name, "(?<=n)\\d+")
for (i in 1:length(df$coefficients)) {
file_validation[[i]] <- validation_function(parameter_list = grid[numbers_after_model, ],
simulation_list = df$coefficients[[i]],
beta_num = 1162)
}
# Bind together this dataframe
file_validation <- do.call(rbind, file_validation)
# Add these numbers as new columns to the data frame
file_validation$model <- as.numeric(numbers_after_model)
file_validation$sample_size <- as.numeric(numbers_after_n)
# Store the file's results
validation_results[[file_idx]] <- file_validation
#Print which iteration you're on
print(paste0("I completed ", numbers_after_model))
}
############################
#upload the grid
############################
grid <- readRDS("/Users/sophshan/Library/CloudStorage/OneDrive-SharedLibraries-UniversityofNorthCarolinaatChapelHill/XTAN group - Summer project on iEMA platform - SHAN Research/Merck/5-Code/Simulation/grid_initial.rds")
############################
#list all the .rdata files
############################
# Assuming your .RData files are in the current working directory
# List all .RData files
files <- list.files(pattern = "\\.RData$")
# Initialize an empty list to store data frames (optional, if you want to combine them later)
all_data_frames <- list()
# Loop through each file
for (file_name in files) {
# Load the .RData file
obj <- load(file_name)
# Generate a new name
new_name <- paste(file_name, sep = "_")
# Assign the object to a new name in the environment
assign(new_name, get(obj))
# Extract the base name of the file without extension for further manipulation
#base_name <- tools::file_path_sans_ext(file_name)
# Assuming the data frame's name inside the .RData matches the file name
# Dynamically access the data frame using get()
df <- get(file_name)
# Extract numbers after 'model' and 'n' from the file name
numbers_after_model <- str_extract(file_name, "(?<=model)\\d+")
numbers_after_n <- str_extract(file_name, "(?<=n)\\d+")
# Extract only the validation information from dataframe
df <- df$validation
# Bind together this dataframe
df <- do.call(rbind, df)
# Add these numbers as new columns to the data frame
df$model <- as.numeric(numbers_after_model)
df$sample_size <- as.numeric(numbers_after_n)
# Add the modified data frame to the list (if you plan to combine them later)
all_data_frames[[file_name]] <- df
}
#Combine all data frames into a single one
combined_df <- do.call(rbind, all_data_frames)
#write.csv(combined_df, "combined_output_simulation_sc12_n1000.csv")
############################
#recalculate the mse/specificity/sensitivity
############################
# Initialize a list to store validation results
validation_results <- list()
# Loop through each file
for (file_idx in 1:length(files)) {
file_name <- files[file_idx]
# Initialize a list for each file's results
file_validation <- list()
# Assuming the data frame's name inside the .RData matches the file name
# Dynamically access the data frame using get()
df <- get(file_name)
# Extract numbers after 'model' and 'n' from the file name
numbers_after_model <- str_extract(file_name, "(?<=model)\\d+")
numbers_after_n <- str_extract(file_name, "(?<=n)\\d+")
for (i in 1:length(df$coefficients)) {
file_validation[[i]] <- validation_function(parameter_list = grid[numbers_after_model, ],
simulation_list = df$coefficients[[i]],
beta_num = 1162)
}
# Bind together this dataframe
file_validation <- do.call(rbind, file_validation)
# Add these numbers as new columns to the data frame
file_validation$model <- as.numeric(numbers_after_model)
file_validation$sample_size <- as.numeric(numbers_after_n)
# Store the file's results
validation_results[[file_idx]] <- file_validation
#Print which iteration you're on
print(paste0("I completed ", numbers_after_model))
}
df$coefficients[[i]]
############################
#install packages
############################
#install.packages("stringr")
library("stringr")
library("tidyverse")
library("devtools")
#install_github("SShan2021/mercksimulation")
library("mercksimulation")
#load_all("/Users/sophshan/Desktop/XTan Group/XTAN group - Summer project on iEMA platform - SHAN Research/Merck/7-GitHub/mercksimulation/")
############################
#set the working directory
############################
setwd("/Users/sophshan/Desktop/XTan Group/XTAN group - Summer project on iEMA platform - SHAN Research/Merck/2-Processed Data/simulation_sc12_n1000/")
############################
#upload the grid
############################
grid <- readRDS("/Users/sophshan/Library/CloudStorage/OneDrive-SharedLibraries-UniversityofNorthCarolinaatChapelHill/XTAN group - Summer project on iEMA platform - SHAN Research/Merck/5-Code/Simulation/grid_initial.rds")
############################
#list all the .rdata files
############################
# Assuming your .RData files are in the current working directory
# List all .RData files
files <- list.files(pattern = "\\.RData$")
# Initialize an empty list to store data frames (optional, if you want to combine them later)
all_data_frames <- list()
# Loop through each file
for (file_name in files) {
# Load the .RData file
obj <- load(file_name)
# Generate a new name
new_name <- paste(file_name, sep = "_")
# Assign the object to a new name in the environment
assign(new_name, get(obj))
# Extract the base name of the file without extension for further manipulation
#base_name <- tools::file_path_sans_ext(file_name)
# Assuming the data frame's name inside the .RData matches the file name
# Dynamically access the data frame using get()
df <- get(file_name)
# Extract numbers after 'model' and 'n' from the file name
numbers_after_model <- str_extract(file_name, "(?<=model)\\d+")
numbers_after_n <- str_extract(file_name, "(?<=n)\\d+")
# Extract only the validation information from dataframe
df <- df$validation
# Bind together this dataframe
df <- do.call(rbind, df)
# Add these numbers as new columns to the data frame
df$model <- as.numeric(numbers_after_model)
df$sample_size <- as.numeric(numbers_after_n)
# Add the modified data frame to the list (if you plan to combine them later)
all_data_frames[[file_name]] <- df
}
#Combine all data frames into a single one
combined_df <- do.call(rbind, all_data_frames)
#write.csv(combined_df, "combined_output_simulation_sc12_n1000.csv")
############################
#recalculate the mse/specificity/sensitivity
############################
# Initialize a list to store validation results
validation_results <- list()
# Loop through each file
for (file_idx in 1:length(files)) {
file_name <- files[file_idx]
# Initialize a list for each file's results
file_validation <- list()
# Assuming the data frame's name inside the .RData matches the file name
# Dynamically access the data frame using get()
df <- get(file_name)
# Extract numbers after 'model' and 'n' from the file name
numbers_after_model <- str_extract(file_name, "(?<=model)\\d+")
numbers_after_n <- str_extract(file_name, "(?<=n)\\d+")
for (i in 1:length(df$coefficients)) {
file_validation[[i]] <- validation_function(parameter_list = grid[numbers_after_model, ],
simulation_list = df$coefficients[[i]],
beta_num = 1162)
}
# Bind together this dataframe
file_validation <- do.call(rbind, file_validation)
# Add these numbers as new columns to the data frame
file_validation$model <- as.numeric(numbers_after_model)
file_validation$sample_size <- as.numeric(numbers_after_n)
# Store the file's results
validation_results[[file_idx]] <- file_validation
#Print which iteration you're on
print(paste0("I completed ", numbers_after_model))
}
load_all("/Users/sophshan/Desktop/XTan Group/XTAN group - Summer project on iEMA platform - SHAN Research/Merck/7-GitHub/mercksimulation/")
library("devtools")
setwd("/Users/sophshan/Library/CloudStorage/OneDrive-SharedLibraries-UniversityofNorthCarolinaatChapelHill/XTAN group - Summer project on iEMA platform - SHAN Research/Merck/7-Github/mercksimulation/")
document()
############################
#install packages
############################
#install.packages("stringr")
library("stringr")
library("tidyverse")
library("devtools")
#install_github("SShan2021/mercksimulation")
library("mercksimulation")
#load_all("/Users/sophshan/Desktop/XTan Group/XTAN group - Summer project on iEMA platform - SHAN Research/Merck/7-GitHub/mercksimulation/")
############################
#set the working directory
############################
setwd("/Users/sophshan/Desktop/XTan Group/XTAN group - Summer project on iEMA platform - SHAN Research/Merck/2-Processed Data/simulation_sc12_n1000_v2/")
############################
#upload the grid
############################
grid <- readRDS("/Users/sophshan/Library/CloudStorage/OneDrive-SharedLibraries-UniversityofNorthCarolinaatChapelHill/XTAN group - Summer project on iEMA platform - SHAN Research/Merck/5-Code/Simulation/grid_initial.rds")
############################
#list all the .rdata files
############################
# Assuming your .RData files are in the current working directory
# List all .RData files
files <- list.files(pattern = "\\.RData$")
# Initialize an empty list to store data frames (optional, if you want to combine them later)
all_data_frames <- list()
# Loop through each file
for (file_name in files) {
# Load the .RData file
obj <- load(file_name)
# Generate a new name
new_name <- paste(file_name, sep = "_")
# Assign the object to a new name in the environment
assign(new_name, get(obj))
# Extract the base name of the file without extension for further manipulation
#base_name <- tools::file_path_sans_ext(file_name)
# Assuming the data frame's name inside the .RData matches the file name
# Dynamically access the data frame using get()
df <- get(file_name)
# Extract numbers after 'model' and 'n' from the file name
numbers_after_model <- str_extract(file_name, "(?<=model)\\d+")
numbers_after_n <- str_extract(file_name, "(?<=n)\\d+")
# Extract only the validation information from dataframe
df <- df$validation
# Bind together this dataframe
df <- do.call(rbind, df)
# Add these numbers as new columns to the data frame
df$model <- as.numeric(numbers_after_model)
df$sample_size <- as.numeric(numbers_after_n)
# Add the modified data frame to the list (if you plan to combine them later)
all_data_frames[[file_name]] <- df
}
#Combine all data frames into a single one
combined_df <- do.call(rbind, all_data_frames)
#write.csv(combined_df, "combined_output_simulation_sc12_n1000.csv")
############################
#recalculate the mse/specificity/sensitivity
############################
# Initialize a list to store validation results
validation_results <- list()
# Loop through each file
for (file_idx in 1:length(files)) {
file_name <- files[file_idx]
# Initialize a list for each file's results
file_validation <- list()
# Assuming the data frame's name inside the .RData matches the file name
# Dynamically access the data frame using get()
df <- get(file_name)
# Extract numbers after 'model' and 'n' from the file name
numbers_after_model <- str_extract(file_name, "(?<=model)\\d+")
numbers_after_n <- str_extract(file_name, "(?<=n)\\d+")
for (i in 1:length(df$coefficients)) {
file_validation[[i]] <- validation_function(parameter_list = grid[numbers_after_model, ],
simulation_list = df$coefficients[[i]],
beta_num = 1162)
}
# Bind together this dataframe
file_validation <- do.call(rbind, file_validation)
# Add these numbers as new columns to the data frame
file_validation$model <- as.numeric(numbers_after_model)
file_validation$sample_size <- as.numeric(numbers_after_n)
# Store the file's results
validation_results[[file_idx]] <- file_validation
#Print which iteration you're on
print(paste0("I completed ", numbers_after_model))
}
combined_df
combined_df
source("~/Library/CloudStorage/OneDrive-SharedLibraries-UniversityofNorthCarolinaatChapelHill/XTAN group - Summer project on iEMA platform - SHAN Research/Merck/5-Code/Simulation/simulation_sc12_n1000.R", echo=TRUE)
combined_df$model <- as.factor(combined_df$model)
combined_df$sample_size <- as.factor(combined_df$sample_size)
############################
#plot the MSE
############################
combined_df %>%
ggplot(aes(x = model, y = mse, group = model,
color = sample_size)) +
geom_boxplot()
############################
#plot the specificity
############################
combined_df %>%
ggplot(aes(x = model, y = specificity, group = model,
color = sample_size)) +
geom_boxplot()
############################
#plot the sensitivity
############################
combined_df %>%
ggplot(aes(x = model, y = sensitivity, group = model,
color = sample_size)) +
geom_boxplot()
############################
#plot the specificity
############################
combined_df %>%
ggplot(aes(x = model, y = specificity, group = model,
color = sample_size)) +
geom_boxplot()
############################
#plot the sensitivity
############################
combined_df %>%
ggplot(aes(x = model, y = sensitivity, group = model,
color = sample_size)) +
geom_boxplot()
############################
#plot the MSE
############################
combined_xdf %>%
ggplot(aes(x = model, y = mse, group = model,
color = sample_size)) +
geom_boxplot()
############################
#plot the MSE
############################
combined_df %>%
ggplot(aes(x = model, y = mse, group = model,
color = sample_size)) +
geom_boxplot()
############################
#plot the MSE
############################
combined_df %>%
ggplot(aes(x = model, y = mse, group = model,
color = sample_size)) +
geom_boxplot()
############################
#plot the specificity
############################
combined_df %>%
ggplot(aes(x = model, y = specificity, group = model,
color = sample_size)) +
geom_boxplot()
############################
#plot the sensitivity
############################
combined_df %>%
ggplot(aes(x = model, y = sensitivity, group = model,
color = sample_size)) +
geom_boxplot()
